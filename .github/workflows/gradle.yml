# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# master이나 dev 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "master", "dev" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            $-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
      - name: make application.yml
        if: |
          contains(github.ref, 'master') ||
          contains(github.ref, 'dev')
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.YML }}" > ./src/main/resources/application.yml
        shell: bash

        #      # 환경별 yml 파일 생성(2) - prod
        #      - name: make application-prod.yml
        #        if: contains(github.ref, 'master')
        #        run: |
        #          cd ./src/main/resources
        #          touch ./application-prod.yml
        #          echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
        #        shell: bash
        #
        #      # 환경별 yml 파일 생성(3) - develop
        #      - name: make application-dev.yml
        #        if: contains(github.ref, 'dev')
        #        run: |
        #          cd ./src/main/resources
        #          touch ./application-dev.yml
        #          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
        #        shell: bash

      # gradlew 스크립트에 실행 권한 부여
      - name: gradlew 스크립트에 실행 권한 부여
        run: |
          chmod +x ./gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to production
      - name: Docker build, and push to prod
        if: |
          contains(github.ref, 'master') ||
          contains(github.ref, 'dev')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/eroom-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/eroom-prod

      ## pull to production
      - name: Pull to prod
        uses: appleboy/ssh-action@master
        id: pull-dev
        if: |
          contains(github.ref, 'master') ||
          contains(github.ref, 'dev')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.USERNAME }} # ubuntu
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/eroom_prod

  docker-pull-and-run:
    runs-on: [self-hosted, prod]
    if: ${{ needs.CI-CD.result == 'success' }}
    needs: [ CI-CD ]
    steps:
      - name : 배포 스크립트 실행
        run: |
          sh /deploy.sh
          sudo docker image prune -f

#      ## deploy to production
#      - name: Deploy to prod
#        uses: appleboy/ssh-action@master
#        id: deploy-prod
#        if: contains(github.ref, 'master')
#        with:
#          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
#          username: ubuntu
#          key: ${{ secrets.PRIVATE_KEY }}
#          envs: GITHUB_SHA
#          script: |
#             sudo docker ps
#             docker stop $(docker ps -a -q)
#             docker rm $(docker ps -a -q)
#             sudo docker pull ${{ secrets.DOCKER_USERNAME }}/eroom_prod
#             sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/eroom_prod
#             sudo docker image prune -f


