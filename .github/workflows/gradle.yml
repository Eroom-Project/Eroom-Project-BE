# github repository actions 페이지에 나타날 이름
name: CI/CD

# event trigger
# master브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # JDK setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          mkdir -p ./src/main/resources
          echo ${{ secrets.YML }} | base64 --decode  > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 최신 버전 이미지를 빌드
      - name: Build Current Version Docker Image
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/eroom-prod:latest .

      - name: Push Docker Images
        run: |
          # 최신 버전 이미지를 Docker 레지스트리에 푸시
           docker push ${{ secrets.DOCKER_USERNAME }}/eroom-prod:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.HOST_PROD }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.HOST_PROD }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.HOST_PROD }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/eroom-prod:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.HOST_PROD }}:${{env.STOPPED_PORT}}/env
          max-attempts: 5
          retry-delay: 10s

      # 웹사이트에 문제가 발생한 경우 롤백 수행
      - name: Rollback if Site Issue
        if: steps.check_deploy_server_url.outcome == 'failure'
        run: |
          # 이전 버전 이미지를 사용하여 롤백
          sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml down
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/eroom-prod:previous
          sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d

      - name: Wait for Load Balancer to Register Targets
        run: sleep 60

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.HOST_PROD }}
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.HOST_PROD }}
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}

      - name: Prune unused Docker images
        run: sudo docker image prune -a

      - name: Check Target Health
        run: |
          aws elbv2 describe-target-health --target-group-arn arn:aws:elasticloadbalancing:us-east-1:471112860836:targetgroup/eroomTargetGroup/029a9432dd208dc7 | jq -r '.TargetHealthDescriptions[].TargetHealth.State'

      # 배포가 정상적으로 완료 시 현재 버전을 이전 버전으로 푸시
      - name: Push Docker previous Images
        if: ${{ github.event_name == 'deployment' && github.event.deployment.status == 'success' }}
        run: |
          # 현재 배포된 버전을 이전 버전으로 푸시
          docker tag ${{ secrets.DOCKER_USERNAME }}/eroom-prod:latest ${{ secrets.DOCKER_USERNAME }}/eroom-prod:previous
          docker push ${{ secrets.DOCKER_USERNAME }}/eroom-prod:previous